#! /usr/bin/env ruby
require 'optparse'
require 'socket'
require 'openssl'
require 'http/2'
require 'uri'
class Logger
  def initialize(id)
    @id = id
  end

  def info(msg)
    puts "[Stream #{@id}]: #{msg}"
  end
end

options = {port: 8080}

OptionParser.new do |opts|
  opts.banner = "Usage: server.rb [options]"
  opts.on("-s", "--secure", "HTTPS mode") do |v|
    options[:secure] = v
  end

  opts.on("-p", "--port [Integer]", "listen port") do |v|
    options[:port] = v
  end
end.parse!

port, secure = options.values_at(:port, :secure)

puts "Starting server on port #{port}"
server = TCPServer.new(options[:port])

loop do
  sock = server.accept
  puts "New TCP Connection!"
  conn = HTTP2::Server.new

  conn.on(:frame) do |bytes|
    puts "Writing bytes: #{bytes.inspect}"
    sock.write bytes
  end
  
  conn.on(:stream) do |stream|
    log = Logger.new(stream.id)
    req, buffer = {}, ''

    stream.on(:active) { log.info 'client opened new stream' }
    stream.on(:close)  { log.info 'stream closed' }

    stream.on(:headers) do |h|
      req = h
      log.info "request headers: #{h}"
    end

    stream.on(:data) do |d|
      log.info "payload chunk: <<#{d}>>"
      buffer << d
    end

    stream.on(:half_close) do
      log.info "client closed its end of the stream"
      response = nil
      if req[':method'] == 'post'
        log.info "Received POST request, payload: #{buffer}"
        response = "Hello HTTP 2.0! POST payload: #{buffer}"
      else
        log.info "Received GET request"
        response = "Hello HTTP 2.0! Get request"
      end

      stream.headers({
        ':status' => '200',
        'content-length' => response.bytesize.to_s,
        'content-type' => 'text/plain'
      }, end_stream: false)
      # split response into multiple data frames

      stream.data(response, end_stream: true)
    end
  end

  while !sock.closed? && !sock.eof?
    data = sock.readpartial(1024)
    begin
      conn << data
    rescue Exception => e
      puts "Exception: #{e}, #{e.message} - closing socket."
      sock.close
    end
  end
end
